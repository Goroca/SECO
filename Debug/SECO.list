
SECO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da8  08002da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002dbc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac56  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a55  00000000  00000000  0002ac92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002124d  00000000  00000000  0002dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009684  00000000  00000000  0004efad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cae01  00000000  00000000  00058631  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  001234b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d70 	.word	0x08002d70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002d70 	.word	0x08002d70

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <MX_GPIO_Init+0xd8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_GPIO_Init+0xd8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a27      	ldr	r2, [pc, #156]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_GPIO_Init+0xd8>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2102      	movs	r1, #2
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <MX_GPIO_Init+0xdc>)
 8000574:	f000 fd94 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2120      	movs	r1, #32
 800057c:	4819      	ldr	r0, [pc, #100]	; (80005e4 <MX_GPIO_Init+0xe0>)
 800057e:	f000 fd8f 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_GPIO_Init+0xe4>)
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	4619      	mov	r1, r3
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <MX_GPIO_Init+0xdc>)
 8000598:	f000 fbf0 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800059c:	2302      	movs	r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0xdc>)
 80005b4:	f000 fbe2 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b8:	2320      	movs	r3, #32
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0xe0>)
 80005d0:	f000 fbd4 	bl	8000d7c <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020800 	.word	0x40020800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	10210000 	.word	0x10210000

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fa6c 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f80a 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f7ff ff84 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f9ca 	bl	8000994 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000600:	f000 f8ec 	bl	80007dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setVoltage();
 8000604:	f000 f870 	bl	80006e8 <setVoltage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x1c>
	...

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fba0 	bl	8002d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a29      	ldr	r2, [pc, #164]	; (80006e0 <SystemClock_Config+0xd4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemClock_Config+0xd8>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffd4 	bl	8001648 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a6:	f000 f826 	bl	80006f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fd04 	bl	80010d4 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d2:	f000 f810 	bl	80006f6 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <setVoltage>:

/* USER CODE BEGIN 4 */
void setVoltage(void) {
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <HAL_MspInit+0x4c>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x4c>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000742:	2007      	movs	r0, #7
 8000744:	f000 fae6 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f9e2 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <SystemInit+0x28>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <SystemInit+0x28>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SystemInit+0x28>)
 80007c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ca:	609a      	str	r2, [r3, #8]
#endif
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <MX_TIM2_Init+0x104>)
 800080e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000812:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000816:	f640 729f 	movw	r2, #3999	; 0xf9f
 800081a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <MX_TIM2_Init+0x104>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_TIM2_Init+0x104>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000834:	482a      	ldr	r0, [pc, #168]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000836:	f001 f961 	bl	8001afc <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000840:	f7ff ff59 	bl	80006f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	4619      	mov	r1, r3
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000852:	f001 fa79 	bl	8001d48 <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800085c:	f7ff ff4b 	bl	80006f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000862:	f001 f976 	bl	8001b52 <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800086c:	f7ff ff43 	bl	80006f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4619      	mov	r1, r3
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_TIM2_Init+0x104>)
 8000880:	f001 fe04 	bl	800248c <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800088a:	f7ff ff34 	bl	80006f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088e:	2360      	movs	r3, #96	; 0x60
 8000890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4294967295;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_TIM2_Init+0x104>)
 80008a8:	f001 f988 	bl	8001bbc <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008b2:	f7ff ff20 	bl	80006f6 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM2_Init+0x104>)
 80008c2:	f001 f97b 	bl	8001bbc <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80008cc:	f7ff ff13 	bl	80006f6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM2_Init+0x104>)
 80008d2:	f000 f827 	bl	8000924 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3738      	adds	r7, #56	; 0x38
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000028 	.word	0x20000028

080008e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f4:	d10d      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_TIM_Base_MspInit+0x3c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_TIM_Base_MspInit+0x3c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000944:	d11d      	bne.n	8000982 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_TIM_MspPostInit+0x68>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_TIM_MspPostInit+0x68>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_TIM_MspPostInit+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000962:	2303      	movs	r3, #3
 8000964:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <HAL_TIM_MspPostInit+0x6c>)
 800097e:	f000 f9fd 	bl	8000d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f001 fdda 	bl	8002584 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f7ff fe8e 	bl	80006f6 <Error_Handler>
  }

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000068 	.word	0x20000068
 80009e4:	40004400 	.word	0x40004400

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 f98d 	bl	8000d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
  ldr  r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff fe85 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 f937 	bl	8002d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fd9f 	bl	80005ec <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ab4:	08002db0 	.word	0x08002db0
  ldr  r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ac0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ac4:	200000ac 	.word	0x200000ac

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f90d 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fe00 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f917 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f8ed 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200000a8 	.word	0x200000a8

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000a8 	.word	0x200000a8

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff47 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff5c 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffb0 	bl	8000cd0 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e165      	b.n	8001064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8154 	bne.w	800105e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d00b      	beq.n	8000dd6 <HAL_GPIO_Init+0x5a>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	2b11      	cmp	r3, #17
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0xfc>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b12      	cmp	r3, #18
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ae 	beq.w	800105e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <HAL_GPIO_Init+0x2fc>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a5b      	ldr	r2, [pc, #364]	; (8001078 <HAL_GPIO_Init+0x2fc>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b59      	ldr	r3, [pc, #356]	; (8001078 <HAL_GPIO_Init+0x2fc>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a57      	ldr	r2, [pc, #348]	; (800107c <HAL_GPIO_Init+0x300>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x304>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x308>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_GPIO_Init+0x30c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_GPIO_Init+0x310>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x206>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x202>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4934      	ldr	r1, [pc, #208]	; (800107c <HAL_GPIO_Init+0x300>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_GPIO_Init+0x320>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <HAL_GPIO_Init+0x320>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_GPIO_Init+0x320>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <HAL_GPIO_Init+0x320>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_GPIO_Init+0x320>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102e:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_GPIO_Init+0x320>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x320>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001058:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_GPIO_Init+0x320>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae96 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	3724      	adds	r7, #36	; 0x24
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40021400 	.word	0x40021400
 8001098:	40021800 	.word	0x40021800
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0cc      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d90c      	bls.n	8001110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b65      	ldr	r3, [pc, #404]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0b8      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a58      	ldr	r2, [pc, #352]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800114a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	494d      	ldr	r1, [pc, #308]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d044      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d119      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e07f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d003      	beq.n	8001192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118e:	2b03      	cmp	r3, #3
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001192:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e06f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e067      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f023 0203 	bic.w	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4934      	ldr	r1, [pc, #208]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c4:	f7ff fce8 	bl	8000b98 <HAL_GetTick>
 80011c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011cc:	f7ff fce4 	bl	8000b98 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e04f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 020c 	and.w	r2, r3, #12
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1eb      	bne.n	80011cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d20c      	bcs.n	800121c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e032      	b.n	8001282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4916      	ldr	r1, [pc, #88]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125a:	f000 f855 	bl	8001308 <HAL_RCC_GetSysClockFreq>
 800125e:	4601      	mov	r1, r0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	fa21 f303 	lsr.w	r3, r1, r3
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1c8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fc48 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00
 8001290:	40023800 	.word	0x40023800
 8001294:	08002d88 	.word	0x08002d88
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000

080012b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012bc:	f7ff fff0 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012c0:	4601      	mov	r1, r0
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	0a9b      	lsrs	r3, r3, #10
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	08002d98 	.word	0x08002d98

080012e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012e4:	f7ff ffdc 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012e8:	4601      	mov	r1, r0
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0b5b      	lsrs	r3, r3, #13
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	08002d98 	.word	0x08002d98

08001308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001322:	4bc6      	ldr	r3, [pc, #792]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b0c      	cmp	r3, #12
 800132c:	f200 817e 	bhi.w	800162c <HAL_RCC_GetSysClockFreq+0x324>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <HAL_RCC_GetSysClockFreq+0x30>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	0800136d 	.word	0x0800136d
 800133c:	0800162d 	.word	0x0800162d
 8001340:	0800162d 	.word	0x0800162d
 8001344:	0800162d 	.word	0x0800162d
 8001348:	08001373 	.word	0x08001373
 800134c:	0800162d 	.word	0x0800162d
 8001350:	0800162d 	.word	0x0800162d
 8001354:	0800162d 	.word	0x0800162d
 8001358:	08001379 	.word	0x08001379
 800135c:	0800162d 	.word	0x0800162d
 8001360:	0800162d 	.word	0x0800162d
 8001364:	0800162d 	.word	0x0800162d
 8001368:	080014d5 	.word	0x080014d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800136c:	4bb4      	ldr	r3, [pc, #720]	; (8001640 <HAL_RCC_GetSysClockFreq+0x338>)
 800136e:	613b      	str	r3, [r7, #16]
       break;
 8001370:	e15f      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001372:	4bb4      	ldr	r3, [pc, #720]	; (8001644 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001374:	613b      	str	r3, [r7, #16]
      break;
 8001376:	e15c      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001378:	4bb0      	ldr	r3, [pc, #704]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001380:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001382:	4bae      	ldr	r3, [pc, #696]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d04a      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138e:	4bab      	ldr	r3, [pc, #684]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	099b      	lsrs	r3, r3, #6
 8001394:	f04f 0400 	mov.w	r4, #0
 8001398:	f240 11ff 	movw	r1, #511	; 0x1ff
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	ea03 0501 	and.w	r5, r3, r1
 80013a4:	ea04 0602 	and.w	r6, r4, r2
 80013a8:	4629      	mov	r1, r5
 80013aa:	4632      	mov	r2, r6
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	0154      	lsls	r4, r2, #5
 80013b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ba:	014b      	lsls	r3, r1, #5
 80013bc:	4619      	mov	r1, r3
 80013be:	4622      	mov	r2, r4
 80013c0:	1b49      	subs	r1, r1, r5
 80013c2:	eb62 0206 	sbc.w	r2, r2, r6
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	0194      	lsls	r4, r2, #6
 80013d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013d4:	018b      	lsls	r3, r1, #6
 80013d6:	1a5b      	subs	r3, r3, r1
 80013d8:	eb64 0402 	sbc.w	r4, r4, r2
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	00e2      	lsls	r2, r4, #3
 80013e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013ea:	00d9      	lsls	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	195b      	adds	r3, r3, r5
 80013f2:	eb44 0406 	adc.w	r4, r4, r6
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	0262      	lsls	r2, r4, #9
 8001400:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001404:	0259      	lsls	r1, r3, #9
 8001406:	460b      	mov	r3, r1
 8001408:	4614      	mov	r4, r2
 800140a:	4618      	mov	r0, r3
 800140c:	4621      	mov	r1, r4
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f04f 0400 	mov.w	r4, #0
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	f7fe fef4 	bl	8000204 <__aeabi_uldivmod>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e049      	b.n	80014b8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001424:	4b85      	ldr	r3, [pc, #532]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	f04f 0400 	mov.w	r4, #0
 800142e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	ea03 0501 	and.w	r5, r3, r1
 800143a:	ea04 0602 	and.w	r6, r4, r2
 800143e:	4629      	mov	r1, r5
 8001440:	4632      	mov	r2, r6
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	f04f 0400 	mov.w	r4, #0
 800144a:	0154      	lsls	r4, r2, #5
 800144c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001450:	014b      	lsls	r3, r1, #5
 8001452:	4619      	mov	r1, r3
 8001454:	4622      	mov	r2, r4
 8001456:	1b49      	subs	r1, r1, r5
 8001458:	eb62 0206 	sbc.w	r2, r2, r6
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f04f 0400 	mov.w	r4, #0
 8001464:	0194      	lsls	r4, r2, #6
 8001466:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800146a:	018b      	lsls	r3, r1, #6
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	eb64 0402 	sbc.w	r4, r4, r2
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	00e2      	lsls	r2, r4, #3
 800147c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001480:	00d9      	lsls	r1, r3, #3
 8001482:	460b      	mov	r3, r1
 8001484:	4614      	mov	r4, r2
 8001486:	195b      	adds	r3, r3, r5
 8001488:	eb44 0406 	adc.w	r4, r4, r6
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	02a2      	lsls	r2, r4, #10
 8001496:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800149a:	0299      	lsls	r1, r3, #10
 800149c:	460b      	mov	r3, r1
 800149e:	4614      	mov	r4, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f04f 0400 	mov.w	r4, #0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4623      	mov	r3, r4
 80014ae:	f7fe fea9 	bl	8000204 <__aeabi_uldivmod>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014b8:	4b60      	ldr	r3, [pc, #384]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	3301      	adds	r3, #1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	613b      	str	r3, [r7, #16]
      break;
 80014d2:	e0ae      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014de:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d04a      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	099b      	lsrs	r3, r3, #6
 80014f0:	f04f 0400 	mov.w	r4, #0
 80014f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	ea03 0501 	and.w	r5, r3, r1
 8001500:	ea04 0602 	and.w	r6, r4, r2
 8001504:	4629      	mov	r1, r5
 8001506:	4632      	mov	r2, r6
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	0154      	lsls	r4, r2, #5
 8001512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001516:	014b      	lsls	r3, r1, #5
 8001518:	4619      	mov	r1, r3
 800151a:	4622      	mov	r2, r4
 800151c:	1b49      	subs	r1, r1, r5
 800151e:	eb62 0206 	sbc.w	r2, r2, r6
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	f04f 0400 	mov.w	r4, #0
 800152a:	0194      	lsls	r4, r2, #6
 800152c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001530:	018b      	lsls	r3, r1, #6
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	eb64 0402 	sbc.w	r4, r4, r2
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	00e2      	lsls	r2, r4, #3
 8001542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001546:	00d9      	lsls	r1, r3, #3
 8001548:	460b      	mov	r3, r1
 800154a:	4614      	mov	r4, r2
 800154c:	195b      	adds	r3, r3, r5
 800154e:	eb44 0406 	adc.w	r4, r4, r6
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	0262      	lsls	r2, r4, #9
 800155c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001560:	0259      	lsls	r1, r3, #9
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f04f 0400 	mov.w	r4, #0
 8001570:	461a      	mov	r2, r3
 8001572:	4623      	mov	r3, r4
 8001574:	f7fe fe46 	bl	8000204 <__aeabi_uldivmod>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e049      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	f04f 0400 	mov.w	r4, #0
 800158a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	ea03 0501 	and.w	r5, r3, r1
 8001596:	ea04 0602 	and.w	r6, r4, r2
 800159a:	4629      	mov	r1, r5
 800159c:	4632      	mov	r2, r6
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	0154      	lsls	r4, r2, #5
 80015a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015ac:	014b      	lsls	r3, r1, #5
 80015ae:	4619      	mov	r1, r3
 80015b0:	4622      	mov	r2, r4
 80015b2:	1b49      	subs	r1, r1, r5
 80015b4:	eb62 0206 	sbc.w	r2, r2, r6
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	0194      	lsls	r4, r2, #6
 80015c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	1a5b      	subs	r3, r3, r1
 80015ca:	eb64 0402 	sbc.w	r4, r4, r2
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	00e2      	lsls	r2, r4, #3
 80015d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015dc:	00d9      	lsls	r1, r3, #3
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	195b      	adds	r3, r3, r5
 80015e4:	eb44 0406 	adc.w	r4, r4, r6
 80015e8:	f04f 0100 	mov.w	r1, #0
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	02a2      	lsls	r2, r4, #10
 80015f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015f6:	0299      	lsls	r1, r3, #10
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	4621      	mov	r1, r4
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f04f 0400 	mov.w	r4, #0
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	f7fe fdfb 	bl	8000204 <__aeabi_uldivmod>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_GetSysClockFreq+0x334>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0f1b      	lsrs	r3, r3, #28
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	613b      	str	r3, [r7, #16]
      break;
 800162a:	e002      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_GetSysClockFreq+0x338>)
 800162e:	613b      	str	r3, [r7, #16]
      break;
 8001630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001632:	693b      	ldr	r3, [r7, #16]
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	00f42400 	.word	0x00f42400
 8001644:	007a1200 	.word	0x007a1200

08001648 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8083 	beq.w	8001768 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001662:	4b95      	ldr	r3, [pc, #596]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d019      	beq.n	80016a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001688:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d05b      	beq.n	8001766 <HAL_RCC_OscConfig+0x11e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d157      	bne.n	8001766 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e216      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x8a>
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a7b      	ldr	r2, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e01d      	b.n	800170e <HAL_RCC_OscConfig+0xc6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0xae>
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a72      	ldr	r2, [pc, #456]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0xc6>
 80016f6:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6f      	ldr	r2, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6c      	ldr	r2, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fa3f 	bl	8000b98 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff fa3b 	bl	8000b98 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1db      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0xd6>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fa2b 	bl	8000b98 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001746:	f7ff fa27 	bl	8000b98 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1c7      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0xfe>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d06f      	beq.n	8001854 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b00      	cmp	r3, #0
 800177e:	d017      	beq.n	80017b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001788:	2b08      	cmp	r3, #8
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001798:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d11c      	bne.n	80017de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a4:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d116      	bne.n	80017de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_OscConfig+0x180>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e18f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4938      	ldr	r1, [pc, #224]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017dc:	e03a      	b.n	8001854 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d020      	beq.n	8001828 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f9d4 	bl	8000b98 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff f9d0 	bl	8000b98 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e170      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4925      	ldr	r1, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
 8001826:	e015      	b.n	8001854 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff f9b3 	bl	8000b98 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff f9af 	bl	8000b98 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e14f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d037      	beq.n	80018d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d016      	beq.n	8001896 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x278>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f993 	bl	8000b98 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff f98f 	bl	8000b98 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e12f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x22e>
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x278>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f97c 	bl	8000b98 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff f978 	bl	8000b98 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d908      	bls.n	80018c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e118      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470000 	.word	0x42470000
 80018c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b8a      	ldr	r3, [pc, #552]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e9      	bne.n	80018a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8097 	beq.w	8001a0c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a7e      	ldr	r2, [pc, #504]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b7c      	ldr	r3, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	; (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff f937 	bl	8000b98 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff f933 	bl	8000b98 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0d3      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x31a>
 8001954:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x354>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x33c>
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6713      	str	r3, [r2, #112]	; 0x70
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x354>
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d015      	beq.n	80019d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff f8f8 	bl	8000b98 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff f8f4 	bl	8000b98 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e092      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0ee      	beq.n	80019ac <HAL_RCC_OscConfig+0x364>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f8e2 	bl	8000b98 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f8de 	bl	8000b98 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e07c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ee      	bne.n	80019d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a3a      	ldr	r2, [pc, #232]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d068      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d060      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d145      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8b3 	bl	8000b98 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f8af 	bl	8000b98 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e04f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	019b      	lsls	r3, r3, #6
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	041b      	lsls	r3, r3, #16
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	071b      	lsls	r3, r3, #28
 8001a80:	491b      	ldr	r1, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f884 	bl	8000b98 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f880 	bl	8000b98 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e020      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x44c>
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f86d 	bl	8000b98 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f869 	bl	8000b98 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e009      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x4a8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x47a>
 8001ae0:	e001      	b.n	8001ae6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060

08001afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e01d      	b.n	8001b4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fede 	bl	80008e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f000 f9bc 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01d      	b.n	8001ba0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d106      	bne.n	8001b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f815 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f000 f991 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0b4      	b.n	8001d40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	f200 809f 	bhi.w	8001d2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c29 	.word	0x08001c29
 8001bf8:	08001d2d 	.word	0x08001d2d
 8001bfc:	08001d2d 	.word	0x08001d2d
 8001c00:	08001d2d 	.word	0x08001d2d
 8001c04:	08001c69 	.word	0x08001c69
 8001c08:	08001d2d 	.word	0x08001d2d
 8001c0c:	08001d2d 	.word	0x08001d2d
 8001c10:	08001d2d 	.word	0x08001d2d
 8001c14:	08001cab 	.word	0x08001cab
 8001c18:	08001d2d 	.word	0x08001d2d
 8001c1c:	08001d2d 	.word	0x08001d2d
 8001c20:	08001d2d 	.word	0x08001d2d
 8001c24:	08001ceb 	.word	0x08001ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f9e2 	bl	8001ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0204 	bic.w	r2, r2, #4
 8001c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6999      	ldr	r1, [r3, #24]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	619a      	str	r2, [r3, #24]
      break;
 8001c66:	e062      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fa32 	bl	80020d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6999      	ldr	r1, [r3, #24]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	619a      	str	r2, [r3, #24]
      break;
 8001ca8:	e041      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fa87 	bl	80021c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0208 	orr.w	r2, r2, #8
 8001cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0204 	bic.w	r2, r2, #4
 8001cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69d9      	ldr	r1, [r3, #28]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
      break;
 8001ce8:	e021      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fadb 	bl	80022ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69d9      	ldr	r1, [r3, #28]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	021a      	lsls	r2, r3, #8
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	61da      	str	r2, [r3, #28]
      break;
 8001d2a:	e000      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001d2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIM_ConfigClockSource+0x18>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0a6      	b.n	8001eae <HAL_TIM_ConfigClockSource+0x166>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d067      	beq.n	8001e68 <HAL_TIM_ConfigClockSource+0x120>
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d80b      	bhi.n	8001db4 <HAL_TIM_ConfigClockSource+0x6c>
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d073      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0x140>
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d802      	bhi.n	8001daa <HAL_TIM_ConfigClockSource+0x62>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d06f      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001da8:	e078      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d06c      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0x140>
 8001dae:	2b30      	cmp	r3, #48	; 0x30
 8001db0:	d06a      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001db2:	e073      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d00d      	beq.n	8001dd4 <HAL_TIM_ConfigClockSource+0x8c>
 8001db8:	2b70      	cmp	r3, #112	; 0x70
 8001dba:	d804      	bhi.n	8001dc6 <HAL_TIM_ConfigClockSource+0x7e>
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	d033      	beq.n	8001e28 <HAL_TIM_ConfigClockSource+0xe0>
 8001dc0:	2b60      	cmp	r3, #96	; 0x60
 8001dc2:	d041      	beq.n	8001e48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001dc4:	e06a      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d066      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x152>
 8001dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd0:	d017      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001dd2:	e063      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f000 fb32 	bl	800244c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001df6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]
      break;
 8001e00:	e04c      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6899      	ldr	r1, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f000 fb1b 	bl	800244c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e24:	609a      	str	r2, [r3, #8]
      break;
 8001e26:	e039      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f000 fa8f 	bl	8002358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2150      	movs	r1, #80	; 0x50
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fae8 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8001e46:	e029      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f000 faae 	bl	80023b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2160      	movs	r1, #96	; 0x60
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fad8 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8001e66:	e019      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f000 fa6f 	bl	8002358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fac8 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8001e86:	e009      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f000 fabf 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8001e98:	e000      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a40      	ldr	r2, [pc, #256]	; (8001fcc <TIM_Base_SetConfig+0x114>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d00f      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3d      	ldr	r2, [pc, #244]	; (8001fd0 <TIM_Base_SetConfig+0x118>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <TIM_Base_SetConfig+0x11c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <TIM_Base_SetConfig+0x120>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <TIM_Base_SetConfig+0x124>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <TIM_Base_SetConfig+0x114>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f18:	d027      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <TIM_Base_SetConfig+0x118>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d023      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <TIM_Base_SetConfig+0x11c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <TIM_Base_SetConfig+0x120>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a29      	ldr	r2, [pc, #164]	; (8001fdc <TIM_Base_SetConfig+0x124>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d017      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <TIM_Base_SetConfig+0x128>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <TIM_Base_SetConfig+0x12c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00f      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <TIM_Base_SetConfig+0x130>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a25      	ldr	r2, [pc, #148]	; (8001fec <TIM_Base_SetConfig+0x134>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <TIM_Base_SetConfig+0x138>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <TIM_Base_SetConfig+0x13c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <TIM_Base_SetConfig+0xf8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <TIM_Base_SetConfig+0x124>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d103      	bne.n	8001fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40000c00 	.word	0x40000c00
 8001fdc:	40010400 	.word	0x40010400
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40014800 	.word	0x40014800
 8001fec:	40001800 	.word	0x40001800
 8001ff0:	40001c00 	.word	0x40001c00
 8001ff4:	40002000 	.word	0x40002000

08001ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <TIM_OC1_SetConfig+0xd8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_OC1_SetConfig+0x64>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <TIM_OC1_SetConfig+0xdc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d10c      	bne.n	8002076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0308 	bic.w	r3, r3, #8
 8002062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <TIM_OC1_SetConfig+0xd8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_OC1_SetConfig+0x8e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <TIM_OC1_SetConfig+0xdc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d111      	bne.n	80020aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800208c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	bf00      	nop
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010400 	.word	0x40010400

080020d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f023 0210 	bic.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0320 	bic.w	r3, r3, #32
 8002122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a22      	ldr	r2, [pc, #136]	; (80021bc <TIM_OC2_SetConfig+0xe4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_OC2_SetConfig+0x68>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <TIM_OC2_SetConfig+0xe8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800215a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <TIM_OC2_SetConfig+0xe4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_OC2_SetConfig+0x94>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_OC2_SetConfig+0xe8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d113      	bne.n	8002194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40010400 	.word	0x40010400

080021c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800220c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <TIM_OC3_SetConfig+0xe0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_OC3_SetConfig+0x66>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <TIM_OC3_SetConfig+0xe4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10d      	bne.n	8002246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <TIM_OC3_SetConfig+0xe0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_OC3_SetConfig+0x92>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <TIM_OC3_SetConfig+0xe4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d113      	bne.n	800227e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800225c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	621a      	str	r2, [r3, #32]
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40010400 	.word	0x40010400

080022ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <TIM_OC4_SetConfig+0xa4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_OC4_SetConfig+0x68>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a11      	ldr	r2, [pc, #68]	; (8002354 <TIM_OC4_SetConfig+0xa8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d109      	bne.n	8002328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40010400 	.word	0x40010400

08002358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f023 030a 	bic.w	r3, r3, #10
 8002394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f023 0210 	bic.w	r2, r3, #16
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	031b      	lsls	r3, r3, #12
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	621a      	str	r2, [r3, #32]
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 0307 	orr.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	431a      	orrs	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e05a      	b.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d01d      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d018      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00e      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10c      	bne.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40001800 	.word	0x40001800

08002584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e03f      	b.n	8002616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fa1c 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f829 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002662:	f023 030c 	bic.w	r3, r3, #12
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268e:	f040 818b 	bne.w	80029a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4ac1      	ldr	r2, [pc, #772]	; (800299c <UART_SetConfig+0x37c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d005      	beq.n	80026a8 <UART_SetConfig+0x88>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4abf      	ldr	r2, [pc, #764]	; (80029a0 <UART_SetConfig+0x380>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f040 80bd 	bne.w	8002822 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026a8:	f7fe fe1a 	bl	80012e0 <HAL_RCC_GetPCLK2Freq>
 80026ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	461d      	mov	r5, r3
 80026b2:	f04f 0600 	mov.w	r6, #0
 80026b6:	46a8      	mov	r8, r5
 80026b8:	46b1      	mov	r9, r6
 80026ba:	eb18 0308 	adds.w	r3, r8, r8
 80026be:	eb49 0409 	adc.w	r4, r9, r9
 80026c2:	4698      	mov	r8, r3
 80026c4:	46a1      	mov	r9, r4
 80026c6:	eb18 0805 	adds.w	r8, r8, r5
 80026ca:	eb49 0906 	adc.w	r9, r9, r6
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026e2:	4688      	mov	r8, r1
 80026e4:	4691      	mov	r9, r2
 80026e6:	eb18 0005 	adds.w	r0, r8, r5
 80026ea:	eb49 0106 	adc.w	r1, r9, r6
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	461d      	mov	r5, r3
 80026f4:	f04f 0600 	mov.w	r6, #0
 80026f8:	196b      	adds	r3, r5, r5
 80026fa:	eb46 0406 	adc.w	r4, r6, r6
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	f7fd fd7f 	bl	8000204 <__aeabi_uldivmod>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	461a      	mov	r2, r3
 800270c:	4ba5      	ldr	r3, [pc, #660]	; (80029a4 <UART_SetConfig+0x384>)
 800270e:	fba3 2302 	umull	r2, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	461d      	mov	r5, r3
 800271c:	f04f 0600 	mov.w	r6, #0
 8002720:	46a9      	mov	r9, r5
 8002722:	46b2      	mov	sl, r6
 8002724:	eb19 0309 	adds.w	r3, r9, r9
 8002728:	eb4a 040a 	adc.w	r4, sl, sl
 800272c:	4699      	mov	r9, r3
 800272e:	46a2      	mov	sl, r4
 8002730:	eb19 0905 	adds.w	r9, r9, r5
 8002734:	eb4a 0a06 	adc.w	sl, sl, r6
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800274c:	4689      	mov	r9, r1
 800274e:	4692      	mov	sl, r2
 8002750:	eb19 0005 	adds.w	r0, r9, r5
 8002754:	eb4a 0106 	adc.w	r1, sl, r6
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	461d      	mov	r5, r3
 800275e:	f04f 0600 	mov.w	r6, #0
 8002762:	196b      	adds	r3, r5, r5
 8002764:	eb46 0406 	adc.w	r4, r6, r6
 8002768:	461a      	mov	r2, r3
 800276a:	4623      	mov	r3, r4
 800276c:	f7fd fd4a 	bl	8000204 <__aeabi_uldivmod>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	461a      	mov	r2, r3
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <UART_SetConfig+0x384>)
 8002778:	fba3 1302 	umull	r1, r3, r3, r2
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	2164      	movs	r1, #100	; 0x64
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3332      	adds	r3, #50	; 0x32
 800278a:	4a86      	ldr	r2, [pc, #536]	; (80029a4 <UART_SetConfig+0x384>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002798:	4498      	add	r8, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	461d      	mov	r5, r3
 800279e:	f04f 0600 	mov.w	r6, #0
 80027a2:	46a9      	mov	r9, r5
 80027a4:	46b2      	mov	sl, r6
 80027a6:	eb19 0309 	adds.w	r3, r9, r9
 80027aa:	eb4a 040a 	adc.w	r4, sl, sl
 80027ae:	4699      	mov	r9, r3
 80027b0:	46a2      	mov	sl, r4
 80027b2:	eb19 0905 	adds.w	r9, r9, r5
 80027b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ce:	4689      	mov	r9, r1
 80027d0:	4692      	mov	sl, r2
 80027d2:	eb19 0005 	adds.w	r0, r9, r5
 80027d6:	eb4a 0106 	adc.w	r1, sl, r6
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	461d      	mov	r5, r3
 80027e0:	f04f 0600 	mov.w	r6, #0
 80027e4:	196b      	adds	r3, r5, r5
 80027e6:	eb46 0406 	adc.w	r4, r6, r6
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	f7fd fd09 	bl	8000204 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <UART_SetConfig+0x384>)
 80027fa:	fba3 1302 	umull	r1, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2164      	movs	r1, #100	; 0x64
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <UART_SetConfig+0x384>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	f003 0207 	and.w	r2, r3, #7
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4442      	add	r2, r8
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e26f      	b.n	8002d02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002822:	f7fe fd49 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 8002826:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	461d      	mov	r5, r3
 800282c:	f04f 0600 	mov.w	r6, #0
 8002830:	46a8      	mov	r8, r5
 8002832:	46b1      	mov	r9, r6
 8002834:	eb18 0308 	adds.w	r3, r8, r8
 8002838:	eb49 0409 	adc.w	r4, r9, r9
 800283c:	4698      	mov	r8, r3
 800283e:	46a1      	mov	r9, r4
 8002840:	eb18 0805 	adds.w	r8, r8, r5
 8002844:	eb49 0906 	adc.w	r9, r9, r6
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002854:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002858:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800285c:	4688      	mov	r8, r1
 800285e:	4691      	mov	r9, r2
 8002860:	eb18 0005 	adds.w	r0, r8, r5
 8002864:	eb49 0106 	adc.w	r1, r9, r6
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	461d      	mov	r5, r3
 800286e:	f04f 0600 	mov.w	r6, #0
 8002872:	196b      	adds	r3, r5, r5
 8002874:	eb46 0406 	adc.w	r4, r6, r6
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	f7fd fcc2 	bl	8000204 <__aeabi_uldivmod>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	461a      	mov	r2, r3
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <UART_SetConfig+0x384>)
 8002888:	fba3 2302 	umull	r2, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	461d      	mov	r5, r3
 8002896:	f04f 0600 	mov.w	r6, #0
 800289a:	46a9      	mov	r9, r5
 800289c:	46b2      	mov	sl, r6
 800289e:	eb19 0309 	adds.w	r3, r9, r9
 80028a2:	eb4a 040a 	adc.w	r4, sl, sl
 80028a6:	4699      	mov	r9, r3
 80028a8:	46a2      	mov	sl, r4
 80028aa:	eb19 0905 	adds.w	r9, r9, r5
 80028ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028c6:	4689      	mov	r9, r1
 80028c8:	4692      	mov	sl, r2
 80028ca:	eb19 0005 	adds.w	r0, r9, r5
 80028ce:	eb4a 0106 	adc.w	r1, sl, r6
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	461d      	mov	r5, r3
 80028d8:	f04f 0600 	mov.w	r6, #0
 80028dc:	196b      	adds	r3, r5, r5
 80028de:	eb46 0406 	adc.w	r4, r6, r6
 80028e2:	461a      	mov	r2, r3
 80028e4:	4623      	mov	r3, r4
 80028e6:	f7fd fc8d 	bl	8000204 <__aeabi_uldivmod>
 80028ea:	4603      	mov	r3, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <UART_SetConfig+0x384>)
 80028f2:	fba3 1302 	umull	r1, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2164      	movs	r1, #100	; 0x64
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	3332      	adds	r3, #50	; 0x32
 8002904:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <UART_SetConfig+0x384>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002912:	4498      	add	r8, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	461d      	mov	r5, r3
 8002918:	f04f 0600 	mov.w	r6, #0
 800291c:	46a9      	mov	r9, r5
 800291e:	46b2      	mov	sl, r6
 8002920:	eb19 0309 	adds.w	r3, r9, r9
 8002924:	eb4a 040a 	adc.w	r4, sl, sl
 8002928:	4699      	mov	r9, r3
 800292a:	46a2      	mov	sl, r4
 800292c:	eb19 0905 	adds.w	r9, r9, r5
 8002930:	eb4a 0a06 	adc.w	sl, sl, r6
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002948:	4689      	mov	r9, r1
 800294a:	4692      	mov	sl, r2
 800294c:	eb19 0005 	adds.w	r0, r9, r5
 8002950:	eb4a 0106 	adc.w	r1, sl, r6
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461d      	mov	r5, r3
 800295a:	f04f 0600 	mov.w	r6, #0
 800295e:	196b      	adds	r3, r5, r5
 8002960:	eb46 0406 	adc.w	r4, r6, r6
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	f7fd fc4c 	bl	8000204 <__aeabi_uldivmod>
 800296c:	4603      	mov	r3, r0
 800296e:	460c      	mov	r4, r1
 8002970:	461a      	mov	r2, r3
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <UART_SetConfig+0x384>)
 8002974:	fba3 1302 	umull	r1, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2164      	movs	r1, #100	; 0x64
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <UART_SetConfig+0x384>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4442      	add	r2, r8
 8002998:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800299a:	e1b2      	b.n	8002d02 <UART_SetConfig+0x6e2>
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4ad7      	ldr	r2, [pc, #860]	; (8002d0c <UART_SetConfig+0x6ec>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d005      	beq.n	80029be <UART_SetConfig+0x39e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4ad6      	ldr	r2, [pc, #856]	; (8002d10 <UART_SetConfig+0x6f0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	f040 80d1 	bne.w	8002b60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029be:	f7fe fc8f 	bl	80012e0 <HAL_RCC_GetPCLK2Freq>
 80029c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	469a      	mov	sl, r3
 80029c8:	f04f 0b00 	mov.w	fp, #0
 80029cc:	46d0      	mov	r8, sl
 80029ce:	46d9      	mov	r9, fp
 80029d0:	eb18 0308 	adds.w	r3, r8, r8
 80029d4:	eb49 0409 	adc.w	r4, r9, r9
 80029d8:	4698      	mov	r8, r3
 80029da:	46a1      	mov	r9, r4
 80029dc:	eb18 080a 	adds.w	r8, r8, sl
 80029e0:	eb49 090b 	adc.w	r9, r9, fp
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029f8:	4688      	mov	r8, r1
 80029fa:	4691      	mov	r9, r2
 80029fc:	eb1a 0508 	adds.w	r5, sl, r8
 8002a00:	eb4b 0609 	adc.w	r6, fp, r9
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f04f 0400 	mov.w	r4, #0
 8002a16:	0094      	lsls	r4, r2, #2
 8002a18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a1c:	008b      	lsls	r3, r1, #2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4623      	mov	r3, r4
 8002a22:	4628      	mov	r0, r5
 8002a24:	4631      	mov	r1, r6
 8002a26:	f7fd fbed 	bl	8000204 <__aeabi_uldivmod>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4bb8      	ldr	r3, [pc, #736]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	469b      	mov	fp, r3
 8002a40:	f04f 0c00 	mov.w	ip, #0
 8002a44:	46d9      	mov	r9, fp
 8002a46:	46e2      	mov	sl, ip
 8002a48:	eb19 0309 	adds.w	r3, r9, r9
 8002a4c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a50:	4699      	mov	r9, r3
 8002a52:	46a2      	mov	sl, r4
 8002a54:	eb19 090b 	adds.w	r9, r9, fp
 8002a58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a70:	4689      	mov	r9, r1
 8002a72:	4692      	mov	sl, r2
 8002a74:	eb1b 0509 	adds.w	r5, fp, r9
 8002a78:	eb4c 060a 	adc.w	r6, ip, sl
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	f04f 0400 	mov.w	r4, #0
 8002a8e:	0094      	lsls	r4, r2, #2
 8002a90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a94:	008b      	lsls	r3, r1, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	4631      	mov	r1, r6
 8002a9e:	f7fd fbb1 	bl	8000204 <__aeabi_uldivmod>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2164      	movs	r1, #100	; 0x64
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	3332      	adds	r3, #50	; 0x32
 8002abc:	4a95      	ldr	r2, [pc, #596]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac8:	4498      	add	r8, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	469b      	mov	fp, r3
 8002ace:	f04f 0c00 	mov.w	ip, #0
 8002ad2:	46d9      	mov	r9, fp
 8002ad4:	46e2      	mov	sl, ip
 8002ad6:	eb19 0309 	adds.w	r3, r9, r9
 8002ada:	eb4a 040a 	adc.w	r4, sl, sl
 8002ade:	4699      	mov	r9, r3
 8002ae0:	46a2      	mov	sl, r4
 8002ae2:	eb19 090b 	adds.w	r9, r9, fp
 8002ae6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002afa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002afe:	4689      	mov	r9, r1
 8002b00:	4692      	mov	sl, r2
 8002b02:	eb1b 0509 	adds.w	r5, fp, r9
 8002b06:	eb4c 060a 	adc.w	r6, ip, sl
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	0094      	lsls	r4, r2, #2
 8002b1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b22:	008b      	lsls	r3, r1, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	4628      	mov	r0, r5
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	f7fd fb6a 	bl	8000204 <__aeabi_uldivmod>
 8002b30:	4603      	mov	r3, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b77      	ldr	r3, [pc, #476]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	; 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	4a72      	ldr	r2, [pc, #456]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4442      	add	r2, r8
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	e0d0      	b.n	8002d02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b60:	f7fe fbaa 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 8002b64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	469a      	mov	sl, r3
 8002b6a:	f04f 0b00 	mov.w	fp, #0
 8002b6e:	46d0      	mov	r8, sl
 8002b70:	46d9      	mov	r9, fp
 8002b72:	eb18 0308 	adds.w	r3, r8, r8
 8002b76:	eb49 0409 	adc.w	r4, r9, r9
 8002b7a:	4698      	mov	r8, r3
 8002b7c:	46a1      	mov	r9, r4
 8002b7e:	eb18 080a 	adds.w	r8, r8, sl
 8002b82:	eb49 090b 	adc.w	r9, r9, fp
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b9a:	4688      	mov	r8, r1
 8002b9c:	4691      	mov	r9, r2
 8002b9e:	eb1a 0508 	adds.w	r5, sl, r8
 8002ba2:	eb4b 0609 	adc.w	r6, fp, r9
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4619      	mov	r1, r3
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	0094      	lsls	r4, r2, #2
 8002bba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bbe:	008b      	lsls	r3, r1, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	f7fd fb1c 	bl	8000204 <__aeabi_uldivmod>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	469b      	mov	fp, r3
 8002be2:	f04f 0c00 	mov.w	ip, #0
 8002be6:	46d9      	mov	r9, fp
 8002be8:	46e2      	mov	sl, ip
 8002bea:	eb19 0309 	adds.w	r3, r9, r9
 8002bee:	eb4a 040a 	adc.w	r4, sl, sl
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	46a2      	mov	sl, r4
 8002bf6:	eb19 090b 	adds.w	r9, r9, fp
 8002bfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c12:	4689      	mov	r9, r1
 8002c14:	4692      	mov	sl, r2
 8002c16:	eb1b 0509 	adds.w	r5, fp, r9
 8002c1a:	eb4c 060a 	adc.w	r6, ip, sl
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4619      	mov	r1, r3
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	f04f 0400 	mov.w	r4, #0
 8002c30:	0094      	lsls	r4, r2, #2
 8002c32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c36:	008b      	lsls	r3, r1, #2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	4631      	mov	r1, r6
 8002c40:	f7fd fae0 	bl	8000204 <__aeabi_uldivmod>
 8002c44:	4603      	mov	r3, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6a:	4498      	add	r8, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	469b      	mov	fp, r3
 8002c70:	f04f 0c00 	mov.w	ip, #0
 8002c74:	46d9      	mov	r9, fp
 8002c76:	46e2      	mov	sl, ip
 8002c78:	eb19 0309 	adds.w	r3, r9, r9
 8002c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c80:	4699      	mov	r9, r3
 8002c82:	46a2      	mov	sl, r4
 8002c84:	eb19 090b 	adds.w	r9, r9, fp
 8002c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca0:	4689      	mov	r9, r1
 8002ca2:	4692      	mov	sl, r2
 8002ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	0094      	lsls	r4, r2, #2
 8002cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc4:	008b      	lsls	r3, r1, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4623      	mov	r3, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	4631      	mov	r1, r6
 8002cce:	f7fd fa99 	bl	8000204 <__aeabi_uldivmod>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002cda:	fba3 1302 	umull	r1, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2164      	movs	r1, #100	; 0x64
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <UART_SetConfig+0x6f4>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4442      	add	r2, r8
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	e7ff      	b.n	8002d02 <UART_SetConfig+0x6e2>
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	4e0d      	ldr	r6, [pc, #52]	; (8002d50 <__libc_init_array+0x38>)
 8002d1c:	4c0d      	ldr	r4, [pc, #52]	; (8002d54 <__libc_init_array+0x3c>)
 8002d1e:	1ba4      	subs	r4, r4, r6
 8002d20:	10a4      	asrs	r4, r4, #2
 8002d22:	2500      	movs	r5, #0
 8002d24:	42a5      	cmp	r5, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	4e0b      	ldr	r6, [pc, #44]	; (8002d58 <__libc_init_array+0x40>)
 8002d2a:	4c0c      	ldr	r4, [pc, #48]	; (8002d5c <__libc_init_array+0x44>)
 8002d2c:	f000 f820 	bl	8002d70 <_init>
 8002d30:	1ba4      	subs	r4, r4, r6
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	2500      	movs	r5, #0
 8002d36:	42a5      	cmp	r5, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d40:	4798      	blx	r3
 8002d42:	3501      	adds	r5, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4a:	4798      	blx	r3
 8002d4c:	3501      	adds	r5, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	08002da8 	.word	0x08002da8
 8002d54:	08002da8 	.word	0x08002da8
 8002d58:	08002da8 	.word	0x08002da8
 8002d5c:	08002dac 	.word	0x08002dac

08002d60 <memset>:
 8002d60:	4402      	add	r2, r0
 8002d62:	4603      	mov	r3, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d100      	bne.n	8002d6a <memset+0xa>
 8002d68:	4770      	bx	lr
 8002d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6e:	e7f9      	b.n	8002d64 <memset+0x4>

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
